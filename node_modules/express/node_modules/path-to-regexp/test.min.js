var pathToRegExp=require("./");var assert=require("assert");describe("path-to-regexp",function(){describe("strings",function(){it("should match simple paths",function(){var b=[];var a=pathToRegExp("/test",b).exec("/test");assert.equal(b.length,0);assert.equal(a.length,1);assert.equal(a[0],"/test")});it("should match express format params",function(){var b=[];var a=pathToRegExp("/:test",b).exec("/pathname");assert.equal(b.length,1);assert.equal(b[0].name,"test");assert.equal(b[0].optional,false);assert.equal(a.length,2);assert.equal(a[0],"/pathname");assert.equal(a[1],"pathname")});it("should do strict matches",function(){var c=[];var b=pathToRegExp("/:test",c,{strict:true});var a;assert.equal(c.length,1);assert.equal(c[0].name,"test");assert.equal(c[0].optional,false);a=b.exec("/route");assert.equal(a.length,2);assert.equal(a[0],"/route");assert.equal(a[1],"route");a=b.exec("/route/");assert.ok(!a)});it("should allow optional express format params",function(){var c=[];var b=pathToRegExp("/:test?",c);var a;assert.equal(c.length,1);assert.equal(c[0].name,"test");assert.equal(c[0].optional,true);a=b.exec("/route");assert.equal(a.length,2);assert.equal(a[0],"/route");assert.equal(a[1],"route");a=b.exec("/");assert.equal(a.length,2);assert.equal(a[0],"/");assert.equal(a[1],undefined)});it("should allow express format param regexps",function(){var b=[];var a=pathToRegExp("/:page(\\d+)",b).exec("/56");assert.equal(b.length,1);assert.equal(b[0].name,"page");assert.equal(b[0].optional,false);assert.equal(a.length,2);assert.equal(a[0],"/56");assert.equal(a[1],"56")});it("should match without a prefixed slash",function(){var b=[];var a=pathToRegExp(":test",b).exec("string");assert.equal(b.length,1);assert.equal(b[0].name,"test");assert.equal(b[0].optional,false);assert.equal(a.length,2);assert.equal(a[0],"string");assert.equal(a[1],"string")});it("should not match format parts",function(){var b=[];var a=pathToRegExp("/:test.json",b).exec("/route.json");assert.equal(b.length,1);assert.equal(b[0].name,"test");assert.equal(b[0].optional,false);assert.equal(a.length,2);assert.equal(a[0],"/route.json");assert.equal(a[1],"route")});it("should match format parts",function(){var c=[];var b=pathToRegExp("/:test.:format",c);var a;assert.equal(c.length,2);assert.equal(c[0].name,"test");assert.equal(c[0].optional,false);assert.equal(c[1].name,"format");assert.equal(c[1].optional,false);a=b.exec("/route.json");assert.equal(a.length,3);assert.equal(a[0],"/route.json");assert.equal(a[1],"route");assert.equal(a[2],"json");a=b.exec("/route");assert.ok(!a)});it("should match route parts with a trailing format",function(){var b=[];var a=pathToRegExp("/:test.json",b).exec("/route.json");assert.equal(b.length,1);assert.equal(b[0].name,"test");assert.equal(b[0].optional,false);assert.equal(a.length,2);assert.equal(a[0],"/route.json");assert.equal(a[1],"route")});it("should match optional trailing routes",function(){var b=[];var a=pathToRegExp("/test*",b).exec("/test/route");assert.equal(b.length,0);assert.equal(a.length,2);assert.equal(a[0],"/test/route");assert.equal(a[1],"/route")});it("should match optional trailing routes after a param",function(){var c=[];var b=pathToRegExp("/:test*",c);var a;assert.equal(c.length,1);assert.equal(c[0].name,"test");assert.equal(c[0].optional,false);a=b.exec("/test/route");assert.equal(a.length,3);assert.equal(a[0],"/test/route");assert.equal(a[1],"test");assert.equal(a[2],"/route");a=b.exec("/testing");assert.equal(a.length,3);assert.equal(a[0],"/testing");assert.equal(a[1],"testing");assert.equal(a[2],"")});it("should match optional trailing routes before a format",function(){var c=[];var b=pathToRegExp("/test*.json",c);var a;assert.equal(c.length,0);a=b.exec("/test.json");assert.equal(a.length,2);assert.equal(a[0],"/test.json");assert.equal(a[1],"");a=b.exec("/testing.json");assert.equal(a.length,2);assert.equal(a[0],"/testing.json");assert.equal(a[1],"ing");a=b.exec("/test/route.json");assert.equal(a.length,2);assert.equal(a[0],"/test/route.json");assert.equal(a[1],"/route")});it("should match optional trailing routes after a param and before a format",function(){var c=[];var b=pathToRegExp("/:test*.json",c);var a;assert.equal(c.length,1);assert.equal(c[0].name,"test");assert.equal(c[0].optional,false);a=b.exec("/testing.json");assert.equal(a.length,3);assert.equal(a[0],"/testing.json");assert.equal(a[1],"testing");assert.equal(a[2],"");a=b.exec("/test/route.json");assert.equal(a.length,3);assert.equal(a[0],"/test/route.json");assert.equal(a[1],"test");assert.equal(a[2],"/route");a=b.exec(".json");assert.ok(!a)});it("should match optional trailing routes between a normal param and a format param",function(){var c=[];var b=pathToRegExp("/:test*.:format",c);var a;assert.equal(c.length,2);assert.equal(c[0].name,"test");assert.equal(c[0].optional,false);assert.equal(c[1].name,"format");assert.equal(c[1].optional,false);a=b.exec("/testing.json");assert.equal(a.length,4);assert.equal(a[0],"/testing.json");assert.equal(a[1],"testing");assert.equal(a[2],"");assert.equal(a[3],"json");a=b.exec("/test/route.json");assert.equal(a.length,4);assert.equal(a[0],"/test/route.json");assert.equal(a[1],"test");assert.equal(a[2],"/route");assert.equal(a[3],"json");a=b.exec("/test");assert.ok(!a);a=b.exec(".json");assert.ok(!a)});it("should match optional trailing routes after a param and before an optional format param",function(){var c=[];var b=pathToRegExp("/:test*.:format?",c);var a;assert.equal(c.length,2);assert.equal(c[0].name,"test");assert.equal(c[0].optional,false);assert.equal(c[1].name,"format");assert.equal(c[1].optional,true);a=b.exec("/testing.json");assert.equal(a.length,4);assert.equal(a[0],"/testing.json");assert.equal(a[1],"testing");assert.equal(a[2],"");assert.equal(a[3],"json");a=b.exec("/test/route.json");assert.equal(a.length,4);assert.equal(a[0],"/test/route.json");assert.equal(a[1],"test");assert.equal(a[2],"/route");assert.equal(a[3],"json");a=b.exec("/test");assert.equal(a.length,4);assert.equal(a[0],"/test");assert.equal(a[1],"test");assert.equal(a[2],"");assert.equal(a[3],undefined);a=b.exec(".json");assert.ok(!a)});it("should match optional trailing routes inside optional express param",function(){var c=[];var b=pathToRegExp("/:test*?",c);var a;assert.equal(c.length,1);assert.equal(c[0].name,"test");assert.equal(c[0].optional,true);a=b.exec("/test/route");assert.equal(a.length,3);assert.equal(a[0],"/test/route");assert.equal(a[1],"test");assert.equal(a[2],"/route");a=b.exec("/test");assert.equal(a.length,3);assert.equal(a[0],"/test");assert.equal(a[1],"test");assert.equal(a[2],"");a=b.exec("/");assert.equal(a.length,3);assert.equal(a[0],"/");assert.equal(a[1],undefined);assert.equal(a[2],undefined)});it("should do case insensitive matches",function(){var a=pathToRegExp("/test").exec("/TEST");assert.equal(a[0],"/TEST")});it("should do case sensitive matches",function(){var b=pathToRegExp("/test",null,{sensitive:true});var a;a=b.exec("/test");assert.equal(a.length,1);assert.equal(a[0],"/test");a=b.exec("/TEST");assert.ok(!a)});it("should do non-ending matches",function(){var b=[];var a=pathToRegExp("/:test",b,{end:false}).exec("/test/route");assert.equal(b.length,1);assert.equal(b[0].name,"test");assert.equal(b[0].optional,false);assert.equal(a.length,2);assert.equal(a[0],"/test");assert.equal(a[1],"test")});it("should match trailing slashes in non-ending non-strict mode",function(){var c=[];var b=pathToRegExp("/:test",c,{end:false});var a;assert.equal(c.length,1);assert.equal(c[0].name,"test");assert.equal(c[0].optional,false);a=b.exec("/test/");assert.equal(a.length,2);assert.equal(a[0],"/test/");assert.equal(a[1],"test")});it("should not match trailing slashes in non-ending strict mode",function(){var b=[];var a=pathToRegExp("/:test",b,{end:false,strict:true});assert.equal(b.length,1);assert.equal(b[0].name,"test");assert.equal(b[0].optional,false);m=a.exec("/test/");assert.equal(m.length,2);assert.equal(m[0],"/test");assert.equal(m[1],"test")});it("should match text after an express param",function(){var b=[];var a=pathToRegExp("/(:test)route",b);assert.equal(b.length,1);assert.equal(b[0].name,"test");assert.equal(b[0].optional,false);m=a.exec("/route");assert.ok(!m);m=a.exec("/testroute");assert.equal(m.length,2);assert.equal(m[0],"/testroute");assert.equal(m[1],"test");m=a.exec("testroute");assert.ok(!m)});it("should match text after an optional express param",function(){var c=[];var b=pathToRegExp("/(:test?)route",c);var a;assert.equal(c.length,1);assert.equal(c[0].name,"test");assert.equal(c[0].optional,true);a=b.exec("/route");assert.equal(a.length,2);assert.equal(a[0],"/route");assert.equal(a[1],undefined);a=b.exec("/testroute");assert.equal(a.length,2);assert.equal(a[0],"/testroute");assert.equal(a[1],"test");a=b.exec("route");assert.ok(!a)});it("should match optional formats",function(){var c=[];var b=pathToRegExp("/:test.:format?",c);var a;assert.equal(c.length,2);assert.equal(c[0].name,"test");assert.equal(c[0].optional,false);assert.equal(c[1].name,"format");assert.equal(c[1].optional,true);a=b.exec("/route");assert.equal(a.length,3);assert.equal(a[0],"/route");assert.equal(a[1],"route");assert.equal(a[2],undefined);a=b.exec("/route.json");assert.equal(a.length,3);assert.equal(a[0],"/route.json");assert.equal(a[1],"route");assert.equal(a[2],"json")});it("should match full paths with format by default",function(){var b=[];var a=pathToRegExp("/:test",b).exec("/test.json");assert.equal(b.length,1);assert.equal(b[0].name,"test");assert.equal(b[0].optional,false);assert.equal(a.length,2);assert.equal(a[0],"/test.json");assert.equal(a[1],"test.json")})});describe("regexps",function(){it("should return the regexp",function(){assert.deepEqual(pathToRegExp(/.*/),/.*/)})});describe("arrays",function(){it("should join arrays parts",function(){var a=pathToRegExp(["/test","/route"]);assert.ok(a.exec("/test"));assert.ok(a.exec("/route"));assert.ok(!a.exec("/else"))})})});