module.exports=preferredEncodings;preferredEncodings.preferredEncodings=preferredEncodings;function parseAcceptEncoding(a){var b;if(a){b=a.split(",").map(function(c){return parseEncoding(c.trim())})}else{b=[]}if(!b.some(function(c){return c&&c.encoding==="identity"})){b.push({encoding:"identity",q:0.1})}return b.filter(function(c){return c&&c.q>0})}function parseEncoding(c){var a=c.match(/^\s*(\S+?)\s*(?:;(.*))?$/);if(!a){return null}var d=a[1];var e=1;if(a[2]){var g=a[2].split(";");for(var b=0;b<g.length;b++){var f=g[b].trim().split("=");if(f[0]==="q"){e=parseFloat(f[1]);break}}}return{encoding:d,q:e}}function getEncodingPriority(a,b){return(b.filter(function(c){return specify(a,c)}).sort(function(d,c){return d.q===c.q?0:d.q>c.q?-1:1})[0]||{q:0}).q}function specify(b,a){if(a.encoding==="*"||a.encoding===b){return a}}function preferredEncodings(b,a){b=parseAcceptEncoding(b||"");if(a){return a.map(function(c){return[c,getEncodingPriority(c,b)]}).filter(function(c){return c[1]>0}).sort(function(d,c){return d[1]===c[1]?0:d[1]>c[1]?-1:1}).map(function(c){return c[0]})}else{return b.sort(function(d,c){return d.q<c.q?1:-1}).map(function(c){return c.encoding})}};