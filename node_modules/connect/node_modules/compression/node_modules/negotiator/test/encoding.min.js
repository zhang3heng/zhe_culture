(function(){var g,c,e,b,d,a,f=this;c=require("../lib/encoding").preferredEncodings;this["Should return identity encoding when no encoding is provided"]=function(h){h.deepEqual(c(null),["identity"]);return h.done()};this["Should include the identity encoding even if not explicity listed"]=function(h){h.ok(c("gzip").indexOf("identity")!==-1);return h.done()};this["Should not return identity encoding if q = 0"]=function(h){h.ok(c("identity;q=0").indexOf("identity")===-1);return h.done()};b=function(h){return f["Should return "+h.selected+" for accept-encoding header "+h.accept+" with provided encoding "+h.provided]=function(i){i.deepEqual(c(h.accept,h.provided),h.selected);return i.done()}};e=[{accept:"gzip",provided:["identity","gzip"],selected:["gzip","identity"]},{accept:"gzip, compress",provided:["compress"],selected:["compress"]},{accept:"deflate",provided:["gzip","identity"],selected:["identity"]},{accept:"*",provided:["identity","gzip"],selected:["identity","gzip"]},{accept:"gzip, compress",provided:["compress","identity"],selected:["compress","identity"]},{accept:"gzip;q=0.8, identity;q=0.5, *;q=0.3",provided:["identity","gzip","compress"],selected:["gzip","identity","compress"]},{accept:"gzip;q=0.8, compress",provided:["gzip","compress"],selected:["compress","gzip"]},{accept:"gzip;q=0.8, compress",provided:null,selected:["compress","gzip","identity"]}];for(d=0,a=e.length;d<a;d++){g=e[d];b(g)}}).call(this);