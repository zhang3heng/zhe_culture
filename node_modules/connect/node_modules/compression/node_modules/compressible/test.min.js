var assert=require("assert");var specifications=require("./specifications.json");var compressible=require("./");var example_types=[{type:"something/text",should:true},{type:"thingie/dart",should:true},{type:"type/json",should:true},{type:"ecmascript/6",should:true},{type:"data/beans+xml",should:true},{type:"asdf/nope",should:false},{type:"cats",should:false}];var invalid_types=[undefined,null,0,1,false,true];var object_true={compressible:true,sources:["compressible.regex"],notes:"Automatically generated via regex."},object_false={compressible:false,sources:["compressible.regex"],notes:"Automatically generated via regex."};describe("Testing if spec lookups are correct.",function(){for(var a in specifications){var b=specifications[a].compressible;it(a+" should"+(b?" ":" not ")+"be compressible",function(){assert.equal(compressible(a),b)})}});describe("Testing if the regex works as intended.",function(){example_types.forEach(function(a){it(a.type+" should"+(a.should?" ":" not ")+"be compressible",function(){assert.equal(compressible(a.type),a.should)})})});describe("Testing if getter returns the correct objects.",function(){it("All spec objects should be get-able",function(){for(var a in specifications){assert.equal(compressible.get(a),specifications[a])}});example_types.forEach(function(a){it(a.type+" should generate a "+(a.should?"true":"false")+" object",function(){assert.deepEqual(compressible.get(a.type),a.should?object_true:object_false)})})});describe("Testing if charsets are handled correctly.",function(){it("Charsets should be stripped off without issue",function(){for(var a in specifications){var b=specifications[a].compressible;assert.equal(compressible(a+"; charset=utf-8"),b)}});it("Types with charsets should be get-able",function(){for(var a in specifications){assert.equal(compressible.get(a+"; charset=utf-8"),specifications[a])}})});describe("Ensuring invalid types do not cause errors.",function(){it("No arguments should return false without error",function(){assert.equal(compressible(),false)});invalid_types.forEach(function(a){it(a+" should return false without error",function(){assert.doesNotThrow(function(){assert.equal(compressible(a),false)})})})});