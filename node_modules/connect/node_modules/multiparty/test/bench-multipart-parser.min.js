var assert=require("assert"),Form=require("../").Form,boundary="-----------------------------168072824752491622650073",mb=100,buffer=createMultipartBuffer(boundary,mb*1024*1024);var callbacks={partBegin:-1,partEnd:-1,headerField:-1,headerValue:-1,partData:-1,end:-1,};var form=new Form({boundary:boundary});hijack("onParseHeaderField",function(){callbacks.headerField++});hijack("onParseHeaderValue",function(){callbacks.headerValue++});hijack("onParsePartBegin",function(){callbacks.partBegin++});hijack("onParsePartData",function(){callbacks.partData++});hijack("onParsePartEnd",function(){callbacks.partEnd++});form.on("finish",function(){callbacks.end++});var start=new Date();form.write(buffer,function(b){var c=new Date()-start;assert.ifError(b);var a=(mb/(c/1000)).toFixed(2);console.log(a+" mb/sec")});process.on("exit",function(){for(var a in callbacks){assert.equal(0,callbacks[a],a+" count off by "+callbacks[a])}});function createMultipartBuffer(e,d){var c="--"+e+'\r\ncontent-disposition: form-data; name="field1"\r\n\r\n',b="\r\n--"+e+"--\r\n",a=new Buffer(d);a.write(c,"ascii",0);a.write(b,"ascii",a.length-b.length);return a}function hijack(a,c){var b=form[a];form[a]=function(){c();return b.apply(this,arguments)}};